import requests
import networkx as nx
import osmnx as ox
import json
import os
import time

# Fonction pour appeler l'API JCDecaux et r√©cup√©rer les stations en temps r√©el
def appeler_api_jcdecaux(api_key, contract_name):
    url = f"https://api.jcdecaux.com/vls/v1/stations?contract={contract_name}&apiKey={api_key}"

    try:
        response = requests.get(url)
        if response.status_code == 200:
            print(f"Stations r√©cup√©r√©es avec succ√®s : {len(response.json())} stations trouv√©es.")
            return response.json()  # Retourner les donn√©es au format JSON
        else:
            print(f"Erreur {response.status_code} : {response.text}")
            return None
    except Exception as e:
        print(f"Une erreur s'est produite lors de l'appel √† l'API : {e}")
        return None

# Fonction pour d√©finir la couleur et l'ic√¥ne en fonction du taux d'occupation des v√©los
def definir_couleur_station(available_bikes, bike_stands, status):
    total_places = available_bikes + bike_stands

    # Si la station est ferm√©e ou en travaux
    if status == "CLOSED":
        return 'gray', '‚ö†Ô∏è'  # Ic√¥ne travaux
    if total_places == 0:
        return 'gray', '‚ùì'  # Ic√¥ne sans donn√©es

    taux_occupation = available_bikes / total_places
    if taux_occupation < 0.25:
        return 'red', 'üî¥'  # Moins de 25% des places occup√©es
    elif 0.25 <= taux_occupation < 0.5:
        return 'orange', 'üü†'  # Entre 25% et 50% des places occup√©es
    else:
        return 'green', 'üü¢'  # Plus de 50% des places occup√©es

# Fonction pour identifier les stations sources (vertes) et cibles (rouges/grises)
def identifier_stations(stations):
    sources = []  # Stations vertes (sources de v√©los)
    cibles = []   # Stations rouges ou grises (destinataires de v√©los)

    for station in stations:
        available_bikes = station['available_bikes']
        available_bike_stands = station['available_bike_stands']
        status = station['status']
        
        # Utiliser la nouvelle fonction pour la couleur et l'ic√¥ne
        couleur, icone = definir_couleur_station(available_bikes, available_bike_stands, status)

        # Ajouter la couleur et l'ic√¥ne dans la station
        station['couleur'] = couleur
        station['icone'] = icone

        if couleur == 'green':
            sources.append(station)
        elif couleur in ['red', 'orange', 'gray']:
            cibles.append(station)

    print(f"Stations sources : {len(sources)}, Stations cibles : {len(cibles)}")
    return sources, cibles

# Fonction pour r√©cup√©rer les r√©seaux routiers (pour camions) ou cyclables (pour v√©los)
def recuperer_reseau(place_name="Nancy, France", mode_transport='velo'):
    network_type = 'bike' if mode_transport == 'velo' else 'drive'
    try:
        graph = ox.graph_from_place(place_name, network_type=network_type)
        print(f"R√©seau {network_type} r√©cup√©r√© avec succ√®s.")
        return graph
    except Exception as e:
        print(f"Erreur lors de la r√©cup√©ration du r√©seau {network_type}: {e}")
        return None

# Fonction pour g√©n√©rer les trajets entre les stations sources et cibles pour v√©lo et camion
def generer_trajets_repartition(sources, cibles, graph_velo, graph_camion):
    trajets_velo = []
    trajets_camion = []

    for cible in cibles:
        if sources:
            source = sources.pop(0)  # Prendre une source
            lat_source, lng_source = source['position']['lat'], source['position']['lng']
            lat_cible, lng_cible = cible['position']['lat'], cible['position']['lng']

            # G√©n√©rer le trajet pour le v√©lo (piste cyclable si dispo, route sinon)
            try:
                # Essayer d'abord avec le r√©seau cyclable
                node_source = ox.distance.nearest_nodes(graph_velo, lng_source, lat_source)
                node_cible = ox.distance.nearest_nodes(graph_velo, lng_cible, lat_cible)

                # Calculer le plus court chemin dans le graphe cyclable
                shortest_path = nx.shortest_path(graph_velo, node_source, node_cible, weight='length')
                path_coords = [(graph_velo.nodes[node]['y'], graph_velo.nodes[node]['x']) for node in shortest_path]
                
                # Ajouter le trajet v√©lo si r√©ussi
                trajets_velo.append({
                    'source': source['name'],
                    'destination': cible['name'],
                    'source_color': source['couleur'],
                    'destination_color': cible['couleur'],
                    'source_icon': source['icone'],
                    'destination_icon': cible['icone'],
                    'path': path_coords,
                    'mode_transport': 'velo'  # Trajet en v√©lo
                })

            except (nx.NetworkXNoPath, KeyError):
                # Si le trajet cyclable √©choue, basculer sur la route
                try:
                    print(f"Bascule sur le r√©seau routier pour le trajet v√©lo entre {source['name']} et {cible['name']}")
                    node_source = ox.distance.nearest_nodes(graph_camion, lng_source, lat_source)
                    node_cible = ox.distance.nearest_nodes(graph_camion, lng_cible, lat_cible)

                    # Calculer le plus court chemin dans le graphe routier
                    shortest_path = nx.shortest_path(graph_camion, node_source, node_cible, weight='length')
                    path_coords = [(graph_camion.nodes[node]['y'], graph_camion.nodes[node]['x']) for node in shortest_path]

                    # Ajouter le trajet routier comme version v√©lo si pas de piste cyclable
                    trajets_velo.append({
                        'source': source['name'],
                        'destination': cible['name'],
                        'source_color': source['couleur'],
                        'destination_color': cible['couleur'],
                        'source_icon': source['icone'],
                        'destination_icon': cible['icone'],
                        'path': path_coords,
                        'mode_transport': 'velo'  # Trajet v√©lo sur route
                    })

                except (nx.NetworkXNoPath, KeyError):
                    print(f"Aucun chemin trouv√© pour le trajet v√©lo entre {source['name']} et {cible['name']}")

            # G√©n√©rer le trajet camion sur le r√©seau routier
            try:
                print(f"G√©n√©ration du trajet camion entre {source['name']} et {cible['name']}")
                node_source = ox.distance.nearest_nodes(graph_camion, lng_source, lat_source)
                node_cible = ox.distance.nearest_nodes(graph_camion, lng_cible, lat_cible)

                # Calculer le plus court chemin dans le graphe routier
                shortest_path = nx.shortest_path(graph_camion, node_source, node_cible, weight='length')
                path_coords = [(graph_camion.nodes[node]['y'], graph_camion.nodes[node]['x']) for node in shortest_path]

                # Ajouter le trajet camion
                trajets_camion.append({
                    'source': source['name'],
                    'destination': cible['name'],
                    'source_color': source['couleur'],
                    'destination_color': cible['couleur'],
                    'source_icon': source['icone'],
                    'destination_icon': cible['icone'],
                    'path': path_coords,
                    'mode_transport': 'camion'  # Trajet en camion
                })

            except (nx.NetworkXNoPath, KeyError):
                print(f"Aucun chemin trouv√© pour le trajet camion entre {source['name']} et {cible['name']}")

    print(f"{len(trajets_velo)} trajets v√©lo g√©n√©r√©s, {len(trajets_camion)} trajets camion g√©n√©r√©s.")
    return trajets_velo, trajets_camion

# Fonction pour g√©n√©rer un fichier JSON avec les trajets de r√©partition
def generer_json_trajets(stations, trajets_velo, trajets_camion, fichier_json='trajets_repartition.json'):
    with open(fichier_json, 'w') as file:
        json.dump({
            'stations': stations,
            'trajets_velo': trajets_velo,
            'trajets_camion': trajets_camion
        }, file, indent=4)
    print(f"Fichier JSON des trajets et des stations g√©n√©r√© sous {fichier_json}")

# Fonction pour appeler la g√©n√©ration des donn√©es
def generer_donnees():
    # Cl√© API et contrat pour l'API JCDecaux
    api_key = "7967e55f58492463189c6b2d17ccb21343a559b3"
    contract_name = "nancy"

    # Appeler l'API JCDecaux pour r√©cup√©rer les stations
    stations = appeler_api_jcdecaux(api_key, contract_name)

    # V√©rifier si les stations ont √©t√© correctement r√©cup√©r√©es
    if stations:
        print(f"{len(stations)} stations r√©cup√©r√©es depuis l'API JCDecaux.")
        
        # Identifier les sources (stations vertes) et cibles (stations rouges ou grises)
        sources, cibles = identifier_stations(stations)

        # R√©cup√©rer les r√©seaux
        graph_velo = recuperer_reseau(mode_transport='velo')  # R√©seau cyclable
        graph_camion = recuperer_reseau(mode_transport='drive')  # R√©seau routier

        if graph_velo and graph_camion:
            # G√©n√©rer les trajets pour v√©lo et camion
            trajets_velo, trajets_camion = generer_trajets_repartition(sources[:], cibles[:], graph_velo, graph_camion)

            # G√©n√©rer un fichier JSON des trajets
            generer_json_trajets(stations, trajets_velo, trajets_camion)
        else:
            print("Erreur lors de la r√©cup√©ration des r√©seaux de transport.")
    else:
        print("Erreur : Impossible de r√©cup√©rer les stations depuis l'API JCDecaux.")

# Boucle principale pour r√©g√©n√©rer toutes les 2 minutes
def main():
    try:
        while True:
            print("D√©but de la g√©n√©ration des donn√©es.")
            generer_donnees()
            print("Donn√©es g√©n√©r√©es. Attente de 2 minutes avant la prochaine ex√©cution.")
            time.sleep(120)  # Attendre 2 minutes (120 secondes) avant de r√©g√©n√©rer
    except KeyboardInterrupt:
        print("Processus interrompu par l'utilisateur.")

# Ex√©cution
if __name__ == "__main__":
    main()
